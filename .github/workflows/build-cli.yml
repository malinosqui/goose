# This is a **reuseable** workflow that bundles the Desktop App for macOS.
# It doesn't get triggered on its own. It gets used in multiple workflows:
#  - release.yml
#  - canary.yml
on:
  workflow_call:
    inputs:
      version:
        required: false
        default: ""
        type: string
      # Let's allow overriding the OSes and architectures in JSON array form:
      # e.g. '["ubuntu-latest","macos-latest"]'
      # If no input is provided, these defaults apply.
      operating-systems:
        type: string
        required: false
        default: '["ubuntu-latest","macos-latest"]'
      architectures:
        type: string
        required: false
        default: '["x86_64","aarch64"]'
      ref:
        type: string
        required: false
        default: 'refs/heads/main'

name: "Reusable workflow to build CLI"

jobs:
  build-cli:
    name: Build CLI
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(inputs.operating-systems) }}
        architecture: ${{ fromJson(inputs.architectures) }}
        include:
          - os: ubuntu-latest
            target-suffix: unknown-linux-gnu
          - os: macos-latest
            target-suffix: apple-darwin

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # pin@v4
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0

      - name: Update version in Cargo.toml
        if: ${{ inputs.version != '' }}
        run: |
          sed -i.bak 's/^version = ".*"/version = "'${{ inputs.version }}'"/' Cargo.toml
          rm -f Cargo.toml.bak

      - name: Install cross
        run: source ./bin/activate-hermit && cargo install cross --git https://github.com/cross-rs/cross

      - name: Build CLI
        env:
          CROSS_NO_WARNINGS: 0
          RUST_LOG: debug
          RUST_BACKTRACE: 1
          CROSS_VERBOSE: 1
        run: |
          source ./bin/activate-hermit
          export TARGET="${{ matrix.architecture }}-${{ matrix.target-suffix }}"
          rustup target add "${TARGET}"
          echo "Building for target: ${TARGET}"
          echo "Rust toolchain info:"
          rustup show
          echo "Cross version:"
          cross --version

          echo "Building with explicit PROTOC path..."
          cross build --release --target ${TARGET} -p goose-cli -vv

          # tar the goose binary as goose-<TARGET>.tar.bz2
          cd target/${TARGET}/release
          tar -cjf goose-${TARGET}.tar.bz2 goose
          echo "ARTIFACT=target/${TARGET}/release/goose-${TARGET}.tar.bz2" >> $GITHUB_ENV

      - name: Upload CLI artifact
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # pin@v4
        with:
          name: goose-${{ matrix.architecture }}-${{ matrix.target-suffix }}
          path: ${{ env.ARTIFACT }}